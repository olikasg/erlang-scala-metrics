<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE chapter SYSTEM "chapter.dtd">

<chapter>
  <header>
    <copyright>
      <year>2003</year>
      <year>2008</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  The contents of this file are subject to the Erlang Public License,
  Version 1.1, (the "License"); you may not use this file except in
  compliance with the License. You should have received a copy of the
  Erlang Public License along with this software. If not, it can be
  retrieved online at http://www.erlang.org/.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
  the License for the specific language governing rights and limitations
  under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>Common Test Basics</title>
    <prepared>Kenneth Lundin, Peter Andersson</prepared>
    <docno></docno>
    <date>2003-10-21</date>
    <rev></rev>
  </header>

  <section>
    <title>Introduction</title>

    <p>
      The Common Test framework (CT) is a tool which can support
      implementation and automated execution of test cases towards different
      types of target systems. The framework is based on the OTP Test
      Server. Test cases can be run individually or in batches. Common
      Test also features a distributed testing mode with central
      control and logging. This feature makes it possible to test
      multiple systems independently in one common session. This
      can be very useful e.g. for running automated large-scale regression 
      tests.
    </p>

    <p>
      The SUT (system under test) may consist of one or several target
      nodes.  CT contains a generic test server which together with
      other test utilities is used to perform test case execution. 
      It is possible to start the tests from the CT GUI or from an OS- or
      Erlang shell prompt. <em>Test suites</em> are files (Erlang
      modules) that contain the <em>test cases</em> (Erlang functions)
      to be executed. <em>Support modules</em> provide functions
      that the test cases utilize in order to carry out the tests.
    </p>
    
    <p>
      The main idea is that CT based test programs connect to
      the target system(s) via standard O&amp;M interfaces. CT
      provides implementations and wrappers of some of these O&amp;M
      interfaces and will be extended with more interfaces later. 
      There are a number of target independent interfaces
      supported in CT such as Generic Telnet, FTP etc. which can be
      specialized or used directly for controlling instruments, 
      traffic generators etc.</p> 
    
    <p>For white-box testing of Erlang code, the test programs can of 
      course call Erlang API functions directly. Black-box testing of 
      Erlang code can use Erlang RPC as well as standard O&amp;M interfaces 
      if desired.
    </p>
    
    <p>A test case can handle several connections towards one or
      several target systems, instruments and traffic generators in
      parallel in order to perform the necessary actions for a
      test. The handling of many connections in parallel is one of
      the major strengths of CT!      
    </p>
  </section>

  <section>
    <title>Test Suite Organisation</title>
    <p>
      The test suites are organized in test directories and each test suite
      may have a separate data directory. Typically, these files and directories
      are version controlled similarly to other forms of source code (possibly by
      means of some CVS-like tool). However, CT does not itself put any requirements 
      on (or has any form of awareness of) possible file and directory versions.
    </p>
  </section>

  <section>
    <title>Support Libraries</title>
    <p>
      Support libraries are functions that are useful for all test suites
      or for test suites in a specific functional area or subsystem.
      So as well as the general support libraries provided by the
      CT framework there might be a need for customized support libraries 
      on a subsystem level.
    </p>
  </section>

  <section>
    <title>Scripting Suite and Test Cases</title>
    <p>
      Testing is performed by running test suites (a set of test cases) or 
      individual test cases. A test suite is implemented as an Erlang module named 
      <c><![CDATA[<suite_name>_SUITE.erl]]></c> which contains a number of test cases.
      A test case is an Erlang function which tests one or more things. 
      The test case is the smallest unit that the CT test server deals with.
    </p>
    
    <p>
      The test suite file must conform to a certain interface which is specified 
      by the CT test server. See the section on writing test suites for more information.
    </p>

    <p>
      A test case is considered successful if it returns to the caller, no matter 
      what the returned value is. A few return values have special meaning however
      (such as <c>{skip,Reason}</c> which indicates that the test case is skipped,
      <c>{comment,Comment}</c> which prints a comment in the log for the test case and 
      <c>{save_config,Config}</c> which makes the CT test server pass <c>Config</c> to 
      the next test case). 
      A test case failure is specified as a runtime error (a crash), no matter what 
      the reason for termination is. If you use Erlang pattern matching effectively,
      you can take advantage of this property. The result will be concise and 
      readable test case functions that look much more like scripts than actual programs. 
      Simple example:
    </p>
    <pre>
      session(_Config) ->
          {started,ServerId} = my_server:start(),
          {clients,[]} = my_server:get_clients(ServerId),
          MyId = self(),
          connected = my_server:connect(ServerId, MyId),
          {clients,[MyId]} = my_server:get_clients(ServerId),
          disconnected = my_server:disconnect(ServerId, MyId),
          {clients,[]} = my_server:get_clients(ServerId),
          stopped = my_server:stop(ServerId).
    </pre>
    <p>
      As a test suite runs, all information (including output to <c>stdout</c>) is 
      recorded in several different log files. A minimum of information is displayed 
      in the user console (only start and stop information, plus a note 
      for each failed test case).
    </p>

    <p>
      The result from each test case is recorded in an HTML log file which is created 
      for the particular test run. Each test case is represented by a row in a table that shows 
      the total execution time, whether the case was successful or if it failed or was skipped,
      plus a possible user comment. For a failed test case, the reason for termination is printed.
      The HTML file has a link to the logfile for each test case (which may also be viewed
      with an HTML browser).
    </p>
    </section>

  <section>
    <title>External Interfaces</title>
    
    <p>
      The CT test server requires some default functions in a 
      test suite. Each suite module should define and export the 
      following functions (most are however optional):
    </p>
    
    <taglist>
      <tag>all()</tag><item>Returns a list of all test cases in the suite. (Mandatory)</item>
      <tag>suite()</tag><item>Default suite configuration. (Optional)</item>
      <tag>sequences()</tag>
      <item>Specifies dependencies between test cases. (Optional)</item>
      <tag>init_per_suite(Conf)</tag>
      <item>Executed before the first test case in a suite. (Optional)</item>
      <tag>end_per_suite(Conf)</tag>
      <item>Executed after the last test case in a suite. (Optional)</item>
      <tag>init_per_testcase(TC, Conf)</tag>
      <item>Executed before each test case in the suite. (Optional)</item>
      <tag>end_per_testcase(TC, Conf)</tag>
      <item>Executed after each test case in the suite. (Optional)</item> 
    </taglist>
      <p>
	For each test case the CT test server needs these functions:
      </p>
      <taglist>
	<tag>Testcasename()</tag>
	<item>Returns a key-value list of test case configuration/information. (Optional)</item>
	<tag>Testcasename(Config)</tag> 
	<item>The actual test case function.</item> 
      </taglist>
    </section>
</chapter>
