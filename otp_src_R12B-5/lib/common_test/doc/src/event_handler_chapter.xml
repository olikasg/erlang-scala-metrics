<?xml version="1.0" encoding="latin1" ?>
<!DOCTYPE chapter SYSTEM "chapter.dtd">

<chapter>
  <header>
    <copyright>
      <year>2006</year>
      <year>2008</year>
      <holder>Ericsson AB, All Rights Reserved</holder>
    </copyright>
    <legalnotice>
  The contents of this file are subject to the Erlang Public License,
  Version 1.1, (the "License"); you may not use this file except in
  compliance with the License. You should have received a copy of the
  Erlang Public License along with this software. If not, it can be
  retrieved online at http://www.erlang.org/.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
  the License for the specific language governing rights and limitations
  under the License.

  The Initial Developer of the Original Code is Ericsson AB.
    </legalnotice>

    <title>Event Handling</title>
    <prepared>Peter Andersson</prepared>
    <docno></docno>
    <date></date>
    <rev></rev>
  </header>

  <section>
    <marker id="event_handling"></marker>
    <title>General</title>
    <p>It is possible for the operator of a Common Test system to receive
    event notifications continously during a test session execution. It is
    reported e.g. when a test case starts and stops, what the current
    count of succeeded, failed and skipped cases is, etc. This information can 
    be used for different purposes such as logging progress and results on 
    other format than HTML, saving statistics to a database for report
    generation and test system supervision.</p>

    <p>Common Test has a framework for event handling which is based on
    the OTP event manager concept and gen_event behaviour. When the Common Test
    server starts, it spawns an event manager. During test execution the
    manager gets a notification from the server every time something
    of potential interest happens. Any event handler plugged into the
    event manager can match on event notifications, take some action 
    or pass the information on. Event handlers are Erlang modules
    implemented by the Common Test user according to the gen_event 
    behaviour (see the OTP User's Guide and Reference Manual for more 
    information).</p>

    <p>As already described, a Common Test server always starts an event manager. 
    The server also plugs in a default event handler which has as its only
    purpose to relay notifications to a globally registered CT Master 
    event manager (if a CT Master server is actually running in the system). 
    The CT Master also spawns an event manager at startup.
    Event handlers plugged into this manager will receive the events from 
    all the test nodes as well as information from the CT Master server
    itself.</p>
  </section>
  <section>
    <title>Usage</title>
    <p>Event handlers may be plugged in by means of
    <seealso marker="run_test_chapter#test_specifications">test specification</seealso> 
    terms:</p>

    <p><c>{event_handler, EventHandlers}</c>, or</p>
    <p><c>{event_handler, EventHandlers, InitArgs}</c>, or</p>
    <p><c>{event_handler, NodeRefs, EventHandlers}</c>, or</p>
    <p><c>{event_handler, NodeRefs, EventHandlers, InitArgs}</c></p>
  
    <p><c>EventHandlers</c> is a list of modules (each having gen_event
    behaviour). An event handler module must be precompiled and its
    location must be specified in the Erlang runtime system code path.
    Before a test session starts, the init function of each plugged in
    event handler is called (with the InitArgs list as argument or [] if
    no start arguments are given).</p>

    <p>To plug a handler into the CT Master event manager, specify 
    <c>master</c> as the node in <c>NodeRefs</c>.</p>

    <p>For an event handler to be able to match on events, the module must
    include the header file <c>ct_event.hrl</c>. An event is a record with the
    following definition:</p>

    <p><c>#event{name, node, data}</c></p>

    <p><c>name</c> is the label (type) of the event. <c>node</c> is the name of the
    node the event has originated from (only relevant for CT Master event handlers).
    <c>data</c> is data specific for the particular event.</p>

    <p>Events:</p>
    <pre>
    #event.name = test_start
    #event.data = {StartTime,LogDir}
    StartTime = {date(), time()}
    LogDir = string()
  
    #event.name = test_done
    #event.data = EndTime
    EndTime = {date(), time()}
  
    #event.name = start_make
    #event.data = Dir
    Dir = string()
  
    #event.name = finished_make
    #event.data = Dir
    Dir = string()
  
    #event.name = tc_start
    #event.data = {Suite,Case}
    Suite = atom()
    Case = atom()
  
    #event.name = tc_done
    #event.data = {Suite,Case,Result}
    Suite = atom()
    Case = atom()
    Result = ok | {skipped,Reason} | {failed,Reason}
    Reason = term()
  
    #event.name = tc_user_skip
    #event.data = {Suite,Case,Comment}
    Suite = atom()
    Case = atom()
    Comment = string()
  
    #event.name = tc_auto_skip
    #event.data = {Suite,Case,Comment}
    Suite = atom()
    Case = atom()
    Comment = string()
  
    #event.name = test_stats
    #event.data = {Ok,Failed,Skipped}
    Ok = Failed = Skipped = integer()
  
    #event.name = start_logging
    #event.data = CtRunDir
    CtRunDir = string()
  
    #event.name = stop_logging
    #event.data = []
  
    #event.name = start_write_file
    #event.data = FullNameFile
    FullNameFile = string()
  
    #event.name = finished_write_file
    #event.data = FullNameFile
    FullNameFile = string()
    </pre>

    <p>The events are also documented in <c>ct_event.erl</c>. This module
    may serve as an example of what an event handler for the CT event 
    manager can look like.</p>
    
    <p>Besides the event_handler test specification terms, it is also possible 
    to install event handlers by means of the <c>run_test</c> flag <c>-event_handler</c>,
    e.g:</p>
    
    <pre>
    $ run_test -dir my_testobj -event_handler my_evh1 my_evh2
    </pre>

    <p>Note that it is not posible to specify start arguments to the event handlers when
    using the run_test script. You may however pass along start arguments
    if you use the <c>ct:run_test/1</c> function. An event_handler tuple in the argument 
    <c>Opts</c> has the following definition (see also <c>ct:run_test/1</c> in the 
    reference manual):</p>

    <pre>
    {event_handler,EventHandlers}

    EventHandlers = EH | [EH]
    EH = atom() | {atom(),InitArgs} | {[atom()],InitArgs}
    InitArgs = [term()] 
    </pre>

    <p>Example:</p>
    <pre>
    1> ct:run_test([{dir,"my_testobj"},{event_handler,[my_evh1,{my_evh2,[node()]}]}]).
    </pre>
    <p>This will install two event handlers for the <c>my_testobj</c> test. Event handler
    <c>my_evh1</c> is started with <c>[]</c> as argument to the init function. Event handler
    <c>my_evh2</c> is started with the name of the current node in the init argument list.</p>

</section>
</chapter>




